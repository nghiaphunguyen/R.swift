fastlane_version "1.86.0"

lane :release do |options|
  git_pull

  libraryVersionUsed = read_podspec['dependencies']['NR.swift.Library'].first
  libraryPodspecVersion = version_get_podspec(path: 'R.swift.Library/NR.swift.Library.podspec')
  unless prompt(text: "R.swift.Library #{libraryVersionUsed} is defined as dependency, current version seems to be #{libraryPodspecVersion}.\nAdjust podspec now if needed. Ready to continue?".green, boolean: true, ci_input: "")
    raise "Aborted by user".red
  end

  currentVersion = version_get_podspec()
  Helper.log.info "Current R.swift podspec version is #{currentVersion}"

  changelog = prompt(text: "Please provide release notes:".green, boolean: false, ci_input: "", multi_line_end_keyword: "FIN")
  af_insert_text_into_file(
    file_path: "Changelog.md",
    text: "## #{newVersion}\n\n#{changelog}\n\n",
    insert_at_bottom: false
  )
  isPrerelease = prompt(text: "Is this a prerelease version?".green, boolean: true, ci_input: "")

  # Sync version.swift with version in podspec
  filepath = '../R.swift/version.swift'
  newVersion = version_get_podspec()

  content = File.read(filepath).sub(/let version = "(.*)"/, "let version = \"#{newVersion}\"")
  File.open(filepath, 'wb') { |file| file.write(content) }

  archivePath = 'rswift.xcarchive'

  xcodebuild(
    workspace: 'R.swift.xcworkspace',
    scheme: 'rswift',
    archivePath: archivePath,
    archive: true
  )

  zipPath = "/tmp/rswift-#{newVersion}.zip"
  sh "rm -f #{zipPath}"

  junk_zip(
    paths: ["#{archivePath}/Products/usr/local/bin/rswift", "./License"],
    output_path: zipPath
  )

  unless is_ci
    notification(
      title: "R.swift release",
      message: "üí° Needs your attention."
    )
  end

  unless prompt(text: "#{newVersion} has been build and prepped for release. If you have any additional changes you would like to make, please do those before continuing. Would you like to commit, tag, push and release #{newVersion} including all uncommitted changes?".green, boolean: true, ci_input:"y")
    raise "Aborted by user".red
  end

  unless `git status --porcelain`.empty?
    git_commit(
      path: ".",
      message: "Preparing for the #{newVersion} release"
    )
  end

  push_to_git_remote

  af_create_github_release(
    owner: ‚Äònghiaphunguyen‚Äô,
    repository: 'r.swift',
    tag_name: "v#{newVersion}",
    target_commitish: 'master',
    name: "#{newVersion}",
    body: "#{changelog}",
    prerelease: isPrerelease
  )

  af_upload_asset_for_github_release(
    file_path: zipPath
  )

  pod_push

  unless is_ci
    notification(
      title: "R.swift release",
      message: "üéâ Version #{newVersion} is released."
    )
  end
end

desc "Runs all the tests"
lane :runalltests do
  cocoapods(repo_update: false)

  scan(
    workspace: "R.swift.xcworkspace",
    scheme: "rswift",
    clean: true
  )
  scan(
    workspace: "R.swift.xcworkspace",
    scheme: "ResourceApp",
    sdk: "iphonesimulator",
    destination: "name=iPhone SE",
    clean: true
  )
  scan(
    workspace: "R.swift.xcworkspace",
    scheme: "ResourceApp-tvOS",
    destination: "name=Apple TV 1080p",
    clean: true
  )
end

error do |lane, exception|
  unless is_ci
    notification(
      title: "R.swift #{lane}",
      message: "‚ùå Failed with an exception."
    )
  end
end
